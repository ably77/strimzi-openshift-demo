apiVersion: machine.openshift.io/v1beta1
kind: MachineSet
metadata:
  labels:
    machine.openshift.io/cluster-api-cluster: <clusterID>
  name: <clusterID>-<role>-<REGION><ZONE>
  namespace: openshift-machine-api
spec:
  replicas: <REPLICAS>
  selector:
    matchLabels:
      machine.openshift.io/cluster-api-cluster: <clusterID>
      machine.openshift.io/cluster-api-machineset: <clusterID>-<role>-<REGION><ZONE>
  template:
    metadata:
      labels:
        machine.openshift.io/cluster-api-cluster: <clusterID>
        machine.openshift.io/cluster-api-machine-role: <role>
        machine.openshift.io/cluster-api-machine-type: <role>
        machine.openshift.io/cluster-api-machineset: <clusterID>-<role>-<REGION><ZONE>
    spec:
      metadata:
        labels:
          node-role.kubernetes.io/<role>: ""
          node-role.kubernetes.io/<second_role>: ""
      providerSpec:
        value:
          ami:
            id: <AMIID>
          apiVersion: awsproviderconfig.openshift.io/v1beta1
          blockDevices:
            - ebs:
                iops: 0
                volumeSize: 120
                volumeType: gp2
          credentialsSecret:
            name: aws-cloud-credentials
          deviceIndex: 0
          iamInstanceProfile:
            id: <clusterID>-worker-profile
          instanceType: <INSTANCETYPE>
          kind: AWSMachineProviderConfig
          placement:
            availabilityZone: <REGION><ZONE>
            region: <REGION>
          securityGroups:
            - filters:
                - name: tag:Name
                  values:
                    - <clusterID>-worker-sg
          subnet:
            filters:
              - name: tag:Name
                values:
                  - <clusterID>-private-<REGION><ZONE>
          tags:
            - name: kubernetes.io/cluster/<clusterID>
              value: owned
          userDataSecret:
            name: worker-user-data
